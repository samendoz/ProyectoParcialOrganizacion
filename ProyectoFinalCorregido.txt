#Proyecto Primer Parcial Organizacion de Computadores
#Combate Pokemon
#Petter de La Cruz
#Sebastian Mendoza
#Use una ruta absoluta hacia el escritorio

.data
arrayPrueba:	
		.float  1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 
		.float  2.0, 1.0, 0.5, 0.5, 1.0, 2.0, 0.5, 0.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.5, 2.0, 1.0, 2.0, 0.5 
		.float  1.0, 2.0, 1.0, 1.0, 1.0, 0.5, 2.0, 1.0, 0.5, 1.0, 1.0, 2.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0 
		.float  1.0, 1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 0.5, 0.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0 
		.float  1.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.5, 1.0, 2.0, 2.0, 1.0, 0.5, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0 
		.float  1.0, 0.5, 2.0, 1.0, 0.5, 1.0, 2.0, 1.0, 0.5, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0 
		.float  1.0, 0.5, 0.5 ,0.5, 1.0, 1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.5 
		.float  0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.5, 1.0 
		.float  1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 0.5, 1.0, 2.0, 1.0, 1.0, 2.0 
		.float  1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 2.0, 1.0, 2.0, 0.5, 0.5, 2.0, 1.0, 1.0, 2.0, 0.5, 1.0, 1.0 
		.float  1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 2.0, 0.5, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0 
		.float  1.0, 1.0, 0.5, 0.5, 2.0, 2.0, 0.5, 1.0, 0.5, 0.5, 2.0, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0 
		.float  1.0, 1.0, 2.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 0.5, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0 
		.float  1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 0.0, 1.0 
		.float  1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 0.5, 0.5, 0.5, 2.0, 1.0, 1.0, 0.5, 2.0, 1.0, 1.0 
		.float  1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 0.0 
		.float  1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.5, 0.5 
		.float  1.0, 2.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0
	fconst: .float 2.0
texta:  .asciiz "Error al abrir el archivo! \n"
textb:  .asciiz "Error al leer el archivo! \n"
textc:  .asciiz "Error al escribir el contenido del Buffer! \n"
archivo: .asciiz "C:\\Users\\pette\\Desktop\\pokeTypes.txt"
prueba: .asciiz "normal,fighting,flying,poison,ground,rock,bug,ghost,steel,fire,water,grass,electric,psychic,ice,dragon,dark,fairy"
text1: .asciiz "Combatientes: "
text2:  .asciiz " vs "	
text3:  .asciiz " Vida:"
text4:  .asciiz " Ataque: "
text5:  .asciiz "Resultados del ataque: \n"
text6:  .asciiz " ataca a " 
text7:  .asciiz " es el ganador ! "
text8:  .asciiz ":"
text9: .asciiz "!"
texto1:  .asciiz "Bienvenido al sistema de combates pokemon:\n"
texto2:  .asciiz "Error: Ingrese un nÃºmero  valido (1 al 10):"
text10:  .asciiz " "
text11:  .asciiz "9. "
text12:  .asciiz "10. "	
text13:  .asciiz "11 . Salir\n"
text14:  .asciiz "Ingrese el numero del primer pokemon para el combate: "
text15:  .asciiz "Ingrese el numero del segundo pokemon para el combate: "
text16:  .asciiz "Combatientes: "
text17:  .asciiz " vs "
text18:  .asciiz " Vida:"
text19:  .asciiz " Ataque: "
text20:  .asciiz "Resultados del ataque: "
text21:  .asciiz " ataca a " 
text22:  .asciiz " es el ganador! "
text23:  .asciiz ". "	
salto:  .asciiz "\n"

buffer: 
	.space 2000
arrTipos: 
	.align 2
	.space 440
arrPokemones: 
	.align 2
	.space 440
buffer2: 
	.space 20

.text
main:
	#Open File
	li $v0, 13 
	la $a0, archivo 
	li $a1, 0 
	li $a2, 0 
	syscall 
	beq $v0, -1, LogErrorOpen
	move $s0, $v0 

	#Read File
	li $v0, 14 
	move $a0, $s0 
	la $a1, buffer 
	li $a2, 2000 
	syscall
	beq $v0, -1, LogErrorRead
	
	jal Split
	
        li $v0, 4
        la $a0, texto1
        syscall
	
	li $v0, 42  
	li $a1, 99
	syscall  
	
	move $s4, $a0
	
	jal imprimirPokemon
	
        li $v0, 4
        la $a0, text13
        syscall
        
        li $v0, 4
        la $a0, text14
        syscall
        
        jal pedirNumero
        move $s0,$v0 
        li $v1, 11
        beq $v0, $v1, Exit      
        
        li $v0, 4
        la $a0, text15
        syscall
        
        jal pedirNumero
        move $s1,$v0
         li $v1, 11
        beq $v0, $v1, Exit    
        
        li $v0, 4
        la $a0, salto
        syscall
        
        addi $s0, $s0, -1
        addi $s1, $s1, -1
        add $s0, $s0, $s4
        add $s1, $s1, $s4
        sll $s0, $s0, 2
        sll $s1, $s1, 2
        la $t0, arrPokemones
        add $s2, $s0, $t0
        add $s3, $s1, $t0
        move $s5, $s0
        move $s7, $s1 
             
        li $v0, 4
        la $a0, text1
        syscall
        li $v0, 4
        lw $a0, 0($s2)
        syscall
        li $v0, 4
        la $a0, text2
        syscall
        li $v0, 4
        lw $a0, 0($s3)
        syscall
        li $v0, 4
        la $a0, salto
        syscall
        
        lw $t6, 0($s2)
        lw $t7, 0($s3)
        
        
  	li $s2, 5  
  	li $s3, 5   
  	li $s6, 0   
  	
        
        #sPosterior calculo de daño
        la $t0, arrTipos
        add $t1, $s5, $t0
        add $t2,  $s7, $t0
        move  $a1, $t2
        move $a0, $t1
        jal StrCompare
        move $t3, $v0
        move $a0, $a1
        jal StrCompare
        move $t4, $v0
        
        move $a0, $t4
        move $a1, $t3
        
  	jal calculoDano	
  	move $s4, $v0			
  	
  	move $a0, $t3
        move $a1, $t4

  	jal calculoDano	
  	move $s5, $v0			
bucle:  
	#formato ataque 1
  	li $v0, 4
  	la $a0, salto
  	syscall
  	li $v0, 4
        move $a0, $t6			
        syscall
        li $v0, 4
        la $a0, text8
        syscall
        li $v0, 4
        la $a0, text3
        syscall
        li $v0, 1
        move $a0, $s2
        syscall
        li $v0, 4
        la $a0, text4
        syscall
  	li $v0, 1
        move $a0, $s4
  	syscall
  	li $v0, 4
        la $a0, text6
        syscall
        li $v0, 4
        move $a0, $t7
        syscall
        li $v0, 4
        la $a0, text8
        syscall
  	li $v0, 4
        la $a0, text3
        syscall
        li $v0, 1
        move $a0, $s3
        syscall
        li $v0, 4
        la $a0, text4
        syscall
  	li $v0, 1
        move $a0, $s5
  	syscall
  	li $v0, 4
        la $a0, salto
        syscall
        li $v0, 4
        la $a0, text5
        syscall
  	
        sub $s3, $s3, $s4  
        slti $t0, $s3, 1
        beqz $t0 ,seguir
        li $s3, 0
        addi $s6, $s6, 1
seguir:	
  	li $v0, 4
        move $a0, $t6			
        syscall
        li $v0, 4
        la $a0, text8
        syscall
        li $v0, 4
        la $a0, text3
        syscall
        li $v0, 1
        move $a0, $s2
        syscall
        li $v0, 4
        la $a0, text4
        syscall
  	li $v0, 1
        move $a0, $s4
  	syscall
  	li $v0, 4
  	la $a0, salto
  	syscall
  	li $v0, 4
        move $a0, $t7
        syscall
        li $v0, 4
        la $a0, text8
        syscall
  	li $v0, 4
        la $a0, text3
        syscall
        li $v0, 1
        move $a0, $s3
        syscall
        li $v0, 4
        la $a0, text4
        syscall
  	li $v0, 1
        move $a0, $s5
  	syscall
  	
  	li $v0, 4
        la $a0, salto
        syscall
        
        bnez $s6, continuar
        
  	#formato ataque 2
  	li $v0, 4
  	la $a0, salto
  	syscall
  	li $v0, 4
        move $a0, $t7
        syscall
        li $v0, 4
        la $a0, text8
        syscall
  	li $v0, 4
        la $a0, text3
        syscall
        li $v0, 1
        move $a0, $s3
        syscall
        li $v0, 4
        la $a0, text4
        syscall
  	li $v0, 1
        move $a0, $s5
  	syscall
  	li $v0, 4
        la $a0, text6
        syscall
  	li $v0, 4
        move $a0, $t6			
        syscall
        li $v0, 4
        la $a0, text8
        syscall
        li $v0, 4
        la $a0, text3
        syscall
        li $v0, 1
        move $a0, $s2
        syscall
        li $v0, 4
        la $a0, text4
        syscall
  	li $v0, 1
        move $a0, $s4
  	syscall
  	li $v0, 4
        la $a0, salto
        syscall
        li $v0, 4
        la $a0, text5
        syscall
        
  	sub $s2, $s2, $s5   
  	slti $t0, $s2, 1
        beqz $t0 ,seguir2
        li $s2, 0
        addi $s6, $s6, 1
seguir2:	
  	li $v0, 4
        move $a0, $t6		
        syscall
        li $v0, 4
        la $a0, text8
        syscall
        li $v0, 4
        la $a0, text3
        syscall
        li $v0, 1
        move $a0, $s2
        syscall
        li $v0, 4
        la $a0, text4
        syscall
  	li $v0, 1
        move $a0, $s4
  	syscall
  	li $v0, 4
  	la $a0, salto
  	syscall
  	li $v0, 4
        move $a0, $t7
        syscall
        li $v0, 4
        la $a0, text8
        syscall
  	li $v0, 4
        la $a0, text3
        syscall
        li $v0, 1
        move $a0, $s3
        syscall
        li $v0, 4
        la $a0, text4
        syscall
  	li $v0, 1
        move $a0, $s5
  	syscall
  	
  	li $v0, 4
        la $a0, salto
        syscall
        
        bnez $s6, continuar
         
        j bucle

continuar:  	
	beqz $s2, segunda
	li $v0, 4
        la $a0, text9
        syscall
	li $v0, 4
        move $a0, $t6
        syscall
        li $v0, 4
        la $a0, text7
        syscall
        
        j Exit
segunda:
	li $v0, 4
        la $a0, text9
        syscall
	li $v0, 4
        move $a0, $t7
        syscall
        li $v0, 4
        la $a0, text7
        syscall
        
	j Exit
	
imprimirPokemon:
	addi $sp, $sp, -4
	sw   $ra, 0($sp)
	li $t0, 0
	la $t7, arrPokemones
	sll $a0,$a0, 2
	add $t7, $t7, $a0
	move $t5, $a0
bucle2:
	slti $t1, $t0, 10  
	beqz $t1, salirbucle2
	sll $t2,$t0, 2
	add $t3, $t7, $t2
	addi $t4, $t0, 1
	
	li $v0, 1
	move $a0, $t4
	syscall
	
	li $v0, 4
	la $a0, text23
	syscall
	
	lw $a0, 0($t3)
	li $v0, 4
	syscall
	
	li $v0, 4
	la $a0, salto
	syscall
	
	
	addi $t0, $t0, 1
	
	j bucle2
salirbucle2:
	lw   $ra, 0($sp)
	addi $sp, $sp, -4
	
	jr $ra

        li $v0, 4
        la $a0, text1
        syscall

        li $v0, 4
        la $a0, text14
        syscall
        
        jal pedirNumero
        move $s0,$v0       

        li $v0, 4
        la $a0, text15
        syscall
        
        jal pedirNumero
        move $s1,$v0

        li $v0, 1
        move $a0, $s0
        syscall        
        
        li $v0, 4
        la $a0, salto
        syscall

        li $v0, 1
        move $a0, $s1
        syscall
	
	j Exit
	
LogErrorOpen:
	li $v0, 4
        la $a0, texta
        syscall
	j Exit

LogErrorRead:
	li $v0, 4
        la $a0, textb
        syscall
	j Exit

LogErrorWriteBuffer:
	li $v0, 4
        la $a0, textc
        syscall
	j Exit

Split: 
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	li $s0, 44 
	li $s1, 10 
	li $t1, 1 
	li $t2, 0 
	la $s2, buffer 
	la $s3, arrPokemones
	la $s4, arrTipos 
	li $t6, 0 
	sw $s2, 0($s3) 
	j Loop
	
Loop: 
	add $t7, $s2, $t6 
	lb $t8, 0($t7)
	beq $t8, $s0, ReemplazarComa 
	beq $t8, $s1, ReemplazarEOL 
	beq $t8, $zero, Finalizar 
	addi $t6, $t6, 1 
	j Loop
	
ReemplazarComa:
	sb $zero, 0($t7) 
	addi $t9, $t7, 1 
	sll $t3, $t2, 2 
	add $t4, $t3, $s4
	sw $t9, 0($t4)
	addi $t2, $t2, 1 
	addi $t6, $t6, 1 
	j Loop
	
ReemplazarEOL:
	sb $zero, 0($t7) 
	addi $t9, $t7, 1 
	sll $t3, $t1, 2 
	add $t4, $t3, $s3
	sw $t9, 0($t4) 
	addi $t1, $t1, 1 
	addi $t6, $t6, 1 
	j Loop
	
Finalizar:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra
Exit:
	li $v0, 10
	syscall

StrCompare:
	addi $sp, $sp, -36
	sw $ra, 0($sp)
	sw $s0, 4($sp)
	sw $s1, 8($sp)
	sw $s2, 12($sp)
	sw $s3, 16($sp)
	sw $t3, 20($sp)
	sw $t4, 24($sp)
	sw $s4, 28($sp)
	sw $t7, 32($sp)
	li $s0, 44 
	la $s1, prueba 
	lw $s2, 0($a0) 
	li $t0, 0 
	li $t1, 1 
	li $s3, 0 
	j Loopi
	
Loopi:
	add $t2, $s1, $t0 
	lb $t3, 0($t2) 
	lb $t4, 0($s2) 
	beq $t3, $zero, Salir 
	beq $t3, $s0, Escoma 
	beq $t3, $t4, Loopj 
	addi $t0, $t0, 1 
	
	j Loopi

Escoma:
	addi $s3, $s3, 1
	addi $t0, $t0, 1
	j Loopi
Loopj:
	add $t2, $s1, $t0
	add $t2, $t2, $t1 
	lb $t3, 0($t2)
	add $t4, $s2, $t1 
	lb $t4, 0($t4)
	beq $t3, $s0, Encontrado 
	bne $t3, $t4, SalirLoopJ 
	addi $t1, $t1, 1 
	j Loopj
SalirLoopJ:
	li $t1, 1 
	addi $t0, $t0, 1 
	j Loopi

Encontrado:
	li $s4, 97
	slt $t7, $t4, $s4
	beqz $t7, SalirLoopJ
	j Salir
Salir:
	move $v0, $s3 
	lw $s4, 28($sp)
	lw $t7, 32($sp)
	lw $t4, 24($sp)
	lw $t3, 20($sp)
	lw $s3, 16($sp)
	lw $s2, 12($sp)
	lw $s1, 8($sp)
	lw $s0, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 36
	jr $ra

pedirNumero:
	
	addi $sp, $sp, -24
	sw $s4, 20($sp)
	sw   $ra, 16($sp)      
	sw $s0, 12($sp)
	sw $s1, 8($sp)
	sw $s2, 4($sp)
	sw $s3, 0($sp)

        
regreso:
        li $s4, 10
        li $v0, 8
        la $a0, buffer
        li $a1, 20
        syscall

	la $s0, buffer
	lbu   $s1, ($s0)      
	lbu   $s2, 1 ($s0)
	lbu   $s3  2 ($s0)
	
	sltiu $t2, $s1, 49               
    	bnez  $t2, fallo
    	sltiu $t2, $s1, 50           
    	beqz  $t2, caso2
    	beq  $s2,$s4, proseguir           
    	
    	sltiu $t2, $s2, 48              
    	bnez  $t2, fallo
    	sltiu $t2, $s2, 50               
    	beqz  $t2, fallo
    		
    	bne  $s3,$s4, fallo
    	
    	j proseguir
 
 caso2:	
   	sltiu $t2, $s1, 49                  
    	bnez  $t2, fallo
    	sltiu $t2, $s1, 58              
    	beqz  $t2, fallo
    		 	
    	bne  $s2,$s4, fallo
    	
proseguir:
	move $a0, $s0
	jal convStringtoInt
	lw $s3, 0($sp)
	lw $s2, 4($sp)
	lw $s1, 8($sp)
	lw $s0, 12($sp)
	lw  $ra, 16($sp) 
	lw $s4, 20($sp)     
	addi $sp, $sp, 24
	
	jr $ra
	
fallo:	
	li $v0, 4
        la $a0, texto2
        syscall
	
	j regreso
	
convStringtoInt:
	addi $sp, $sp, -4
	sw   $ra, 0($sp)
	
	li $t0, 0                            
	li $t1, 10			    
	move $t2, $a0		
	lbu $t3, ($t2)
	addi $t0,$t3,-48		
	addi $t2, $t2, 1
	lbu $t3, ($t2)
	
bucleint:
	beq $t3, $t1, enviar		
	addi $t4,$t3,-48
	mul $t0, $t0, 10		
	add $t0, $t0, $t4		  
	addi $t2, $t2, 1      		    
   	lbu $t3, ($t2) 	
	j bucleint

enviar:
	move $v0,$t0
	lw   $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

calculoDano:
	addi $sp, $sp, -12
	sw   $ra, 0($sp) 
	sw $a0, 4($sp)
	sw $a1, 8($sp)
	la $s0, arrayPrueba
  	li $s1, 18
  	li $t9, 4
	mul  $t0,$a1, $s1
	add  $t0, $t0, $a0
	mul $t0, $t0, $t9
	add $t0,$t0, $s0
	l.s $f0, 0($t0)
	l.s $f1, fconst
	mul.s $f2, $f1, $f0
	cvt.w.s $f0, $f2
	mfc1 $t0, $f0
	move $v0, $t0
	lw   $ra, 0($sp)  
	lw $a0, 4($sp)
	lw $a1, 8($sp)
	addi $sp, $sp, 12
	jr $ra
